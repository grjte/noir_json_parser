{"noir_version":"0.33.0+325dac54efb6f99201de9fdeb0a507d45189607d","hash":16439827046151859490,"abi":{"parameters":[{"name":"text","type":{"kind":"string","length":1024},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"33":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\nmod runtime;\nmod meta;\nmod append;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"57":{"source":"global GRAMMAR_SCAN = 0;\nglobal STRING_SCAN = 1;\nglobal NUMERIC_SCAN = 2;\nglobal LITERAL_SCAN = 3;\n\nglobal OBJECT_OPEN = 0;\nglobal OBJECT_CLOSE = 1;\nglobal ARRAY_OPEN = 2;\nglobal ARRAY_CLOSE = 3;\nglobal KEY_DELIMITER = 4;\nglobal VALUE_DELIMITER = 5;\nglobal KEY = 6;\nglobal STRING  = 7;\nglobal NUMERIC = 8;\nglobal LITERAL = 9;\n\nglobal OBJECT_TYPE = 0;\nglobal ARRAY_TYPE = 1;\nglobal STRING_TYPE = 2;\nglobal NUMBER_TYPE = 3;\nglobal LITERAL_TYPE = 4;\n\nuse crate::getters;\nuse crate::getters::JSONLiteral;\nuse crate::test_data::JSON_WITH_ARRAYS;\nuse dep::noir_sort;\nuse crate::transcript_entry::TranscriptEntry;\nuse crate::json_entry::JSONEntry;\nuse crate::keymap;\nuse crate::lt::{lt_field_8_bit, lt_field_16_bit};\nuse crate::redux_tables::{\n    NUM_TOKENS_MUL_2, CAPTURE_TABLE_ENCODED_FLAT, NUM_TOKENS, NO_TOKEN, TOKEN_IS_ARRAY_OBJECT_OR_VALUE,\n    TOKEN_IS_NUMERIC_OR_LITERAL, OBJECT_LAYER, ARRAY_LAYER, SINGLE_VALUE_LAYER, CAPTURE_TABLE_ENCODED,\n    GRAMMAR_CAPTURE_INCREASE_LENGTH, STRING_CAPTURE_INCREASE_LENGTH, NUMERIC_CAPTURE_INCREASE_LENGTH,\n    LITERAL_CAPTURE_INCREASE_LENGTH, GRAMMAR_CAPTURE_ERROR_FLAG, STRING_CAPTURE_ERROR_FLAG,\n    NUMERIC_CAPTURE_ERROR_FLAG, LITERAL_CAPTURE_ERROR_FLAG, LITERAL_CAPTURE_PUSH_TRANSCRIPT,\n    LITERAL_CAPTURE_TOKEN, LITERAL_CAPTURE_TABLE, NUMERIC_CAPTURE_PUSH_TRANSCRIPT,\n    NUMERIC_CAPTURE_TOKEN, NUMERIC_CAPTURE_TABLE, STRING_CAPTURE_PUSH_TRANSCRIPT, STRING_CAPTURE_TOKEN,\n    STRING_CAPTURE_TABLE, GRAMMAR_CAPTURE_PUSH_TRANSCRIPT, GRAMMAR_CAPTURE_TOKEN, GRAMMAR_CAPTURE_TABLE,\n    GRAMMAR_CAPTURE, STRING_CAPTURE, NUMERIC_CAPTURE, LITERAL_CAPTURE, ERROR_CAPTURE,\n    BEGIN_OBJECT_TOKEN, END_OBJECT_TOKEN, BEGIN_ARRAY_TOKEN, END_ARRAY_TOKEN, KEY_SEPARATOR_TOKEN,\n    VALUE_SEPARATOR_TOKEN, STRING_TOKEN, NUMERIC_TOKEN, LITERAL_TOKEN, KEY_TOKEN\n};\n\nfn get_flattened_capture_table() {}\n// todo: single value context?\nglobal OBJECT_CONTEXT: Field = 0;\nglobal ARRAY_CONTEXT: Field = 1;\n\nglobal CAPTURE_TABLE: [[Field; 128]; 4] = [GRAMMAR_CAPTURE_TABLE, STRING_CAPTURE_TABLE, NUMERIC_CAPTURE_TABLE, LITERAL_CAPTURE_TABLE];\nglobal CAPTURE_TOKEN: [[Field; 128]; 4] = [GRAMMAR_CAPTURE_TOKEN, STRING_CAPTURE_TOKEN, NUMERIC_CAPTURE_TOKEN, LITERAL_CAPTURE_TOKEN];\nglobal CAPTURE_PUSH_TRANSCRIPT: [[bool; 128]; 4] = [GRAMMAR_CAPTURE_PUSH_TRANSCRIPT, STRING_CAPTURE_PUSH_TRANSCRIPT, NUMERIC_CAPTURE_PUSH_TRANSCRIPT, LITERAL_CAPTURE_PUSH_TRANSCRIPT];\nglobal CAPTURE_INCREASE_LENGTH: [[bool; 128]; 4] = [GRAMMAR_CAPTURE_INCREASE_LENGTH, STRING_CAPTURE_INCREASE_LENGTH, NUMERIC_CAPTURE_INCREASE_LENGTH, LITERAL_CAPTURE_INCREASE_LENGTH];\nglobal CAPTURE_ERROR_FLAG: [[bool; 128]; 4] = [GRAMMAR_CAPTURE_ERROR_FLAG, STRING_CAPTURE_ERROR_FLAG, NUMERIC_CAPTURE_ERROR_FLAG, LITERAL_CAPTURE_ERROR_FLAG];\n\nunconstrained fn make_capture_table_full() -> [[Field; 128]; 4] {\n    let mut result: [[Field; 128]; 4] = [[0; 128]; 4];\n    for i in 0..4 {\n        for j in 0..128 {\n            let table = CAPTURE_TABLE[i][j];\n            let token = CAPTURE_TOKEN[i][j];\n            let push_transcript = CAPTURE_PUSH_TRANSCRIPT[i][j] as Field;\n            let increase_length = CAPTURE_INCREASE_LENGTH[i][j] as Field;\n            let error = CAPTURE_ERROR_FLAG[i][j] as Field;\n\n            let full = table\n                + token * 0x100\n                + push_transcript * 0x10000\n                + increase_length * 0x1000000\n                + error * 0x100000000;\n            result[i][j] = full;\n        }\n    }\n\n    result\n}\n\n/*\n                parent_num_entries_stack[depth] = num_entries_at_current_depth; // add one because we include the array/object\n                parent_context[depth] = context;\n                parent_key_length[depth] = current_key_length;\n                parent_key_index[depth] = current_key_index;\n                parent_json_index[depth] = index;\n                entry_ptr_stack[depth] = entry_ptr;\n                parent_identity_stack[depth] = current_identity_value;\n\n*/\n\nstruct TranscriptMetaData {\n    entry_ptr: Field,\n    depth: Field,\n    num_entries_at_current_depth: Field,\n    next_identity_value: Field,\n    current_identity_value: Field,\n    context: Field,\n    key_ptr: Field,\n    current_key_index: Field,\n    current_key_length: Field,\n}\nstruct JSONContextStackEntry {\n    num_entries: Field,\n    context: Field,\n    current_key_length: Field,\n    current_key_index: Field,\n    json_index: Field,\n    entry_pointer: Field,\n    current_identity: Field\n}\nimpl JSONContextStackEntry {\n    fn from_field(f: Field) -> Self {\n        // 19 + 6 = 25\n        let bytes = f.to_be_bytes(13);\n        let context = bytes[0] as Field;\n        let num_entries = bytes[1] as Field * 0x100 + bytes[2] as Field;\n        let current_key_length = bytes[3] as Field * 0x100 + bytes[4] as Field;\n        let current_key_index = bytes[5] as Field * 0x100 + bytes[6] as Field;\n        let json_index = bytes[7] as Field * 0x100 + bytes[8] as Field;\n        let entry_pointer = bytes[9] as Field * 0x100 + bytes[10] as Field;\n        let current_identity = bytes[11] as Field * 0x100 + bytes[12] as Field;\n        JSONContextStackEntry { num_entries, context, current_key_length, current_key_index, json_index, entry_pointer, current_identity }\n    }\n\n    fn to_field(self) -> Field {\n        self.current_identity\n            + self.entry_pointer * 0x10000\n            + self.json_index * 0x100000000\n            + self.current_key_index * 0x1000000000000\n            + self.current_key_length * 0x10000000000000000\n            + self.num_entries * 0x100000000000000000000\n            + self.context * 0x1000000000000000000000000\n    }\n}\n\nstruct TokenFlags {\n    create_json_entry: Field,\n    json_entry_type: Field,\n    is_end_of_object_or_array: Field,\n    is_start_of_object_or_array: Field,\n    new_context: Field,\n    is_key_token: Field,\n    is_value_token: Field,\n    is_value_token_in_array_context: Field,\n    create_key_entry: Field,\n    is_end_of_object_or_array_in_array_context: Field,\n    preserve_identity_value: Field,\n    preserve_num_entries: Field,\n}\n\nimpl TokenFlags {\n\n    fn from_field(f: Field) -> Self {\n        // 18 gates!\n        let bytes = f.to_be_bytes(12);\n        let create_json_entry = bytes[0] as Field;\n        let json_entry_type = bytes[1] as Field;\n        let is_end_of_object_or_array = bytes[2] as Field;\n        let is_start_of_object_or_array = bytes[3] as Field;\n        let new_context = bytes[4] as Field;\n        let is_key_token = bytes[5] as Field;\n\n        let is_value_token = bytes[6] as Field;\n        let is_value_token_in_array_context = bytes[7] as Field;\n        let create_key_entry = bytes[8] as Field;\n        let is_end_of_object_or_array_in_array_context = bytes[9] as Field;\n        let preserve_identity_value = bytes[10] as Field;\n        let preserve_num_entries = bytes[11] as Field;\n\n        TokenFlags {\n            create_json_entry,\n            json_entry_type,\n            is_end_of_object_or_array,\n            is_start_of_object_or_array,\n            new_context,\n            is_key_token,\n            is_value_token,\n            is_value_token_in_array_context,\n            create_key_entry,\n            is_end_of_object_or_array_in_array_context,\n            preserve_identity_value,\n            preserve_num_entries\n        }\n    }\n\n    fn to_field(self) -> Field {\n        self.preserve_num_entries\n            + self.preserve_identity_value * 0x100\n            + self.is_end_of_object_or_array_in_array_context * 0x10000\n            + self.create_key_entry * 0x1000000\n            + self.is_value_token_in_array_context * 0x100000000\n            + self.is_value_token * 0x10000000000\n            + self.is_key_token * 0x1000000000000\n            + self.new_context * 0x100000000000000\n            + self.is_start_of_object_or_array * 0x10000000000000000\n            + self.is_end_of_object_or_array * 0x1000000000000000000\n            + self.json_entry_type * 0x100000000000000000000\n            + self.create_json_entry\n                                                        * 0x10000000000000000000000\n    }\n\n    fn default() -> Self {\n        TokenFlags {\n            create_json_entry: 0,\n            json_entry_type: 0,\n            is_end_of_object_or_array: 0,\n            is_start_of_object_or_array: 0,\n            new_context: 0,\n            is_key_token: 0,\n            preserve_num_entries: 0,\n            preserve_identity_value: 0,\n            is_end_of_object_or_array_in_array_context: 0,\n            create_key_entry: 0,\n            is_value_token_in_array_context: 0,\n            is_value_token: 0\n        }\n    }\n    // fn new(a: Field, b: Field, c: Field, d: Field, e: Field, f: Field) -> Self {\n    //     TokenFlags {\n    //         create_json_entry: a,\n    //         json_entry_type: b,\n    //         is_end_of_object_or_array: c,\n    //         is_start_of_object_or_array: d,\n    //         new_context: e,\n    //         is_key_token: f\n    //     }\n    // }\n}\nunconstrained fn generate_token_flags_table() -> [Field; NUM_TOKENS * 2] {\n    let mut flags: [TokenFlags; NUM_TOKENS * 2] = [TokenFlags::default(); NUM_TOKENS * 2];\n\n    let mut no_token_flags: TokenFlags = TokenFlags {\n        create_json_entry: 0,\n        json_entry_type: 0,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 0,\n        new_context: OBJECT_CONTEXT,\n        is_key_token: 0,\n        is_value_token: 0,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 0,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 1,\n        preserve_num_entries: 1\n    };\n    let mut key_token_flags: TokenFlags = TokenFlags {\n        create_json_entry: 0,\n        json_entry_type: 0,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 0,\n        new_context: OBJECT_CONTEXT,\n        is_key_token: 1,\n        is_value_token: 0,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 0,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 1,\n        preserve_num_entries: 1\n    };\n    let begin_object_flags = TokenFlags {\n        create_json_entry: 0,\n        json_entry_type: 0,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 1,\n        new_context: OBJECT_CONTEXT,\n        is_key_token: 0,\n        is_value_token: 0,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 0,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 0,\n        preserve_num_entries: 0\n    };\n\n    let begin_array_flags = TokenFlags {\n        create_json_entry: 0,\n        json_entry_type: 0,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 1,\n        new_context: ARRAY_CONTEXT,\n        is_key_token: 0,\n        is_value_token: 0,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 0,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 0,\n        preserve_num_entries: 0\n    };\n\n    let mut end_object_flags = TokenFlags {\n        create_json_entry: 1,\n        json_entry_type: BEGIN_OBJECT_TOKEN,\n        is_end_of_object_or_array: 1,\n        is_start_of_object_or_array: 0,\n        new_context: 0,\n        is_key_token: 0,\n        is_value_token: 0,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 1,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 0,\n        preserve_num_entries: 0\n    };\n\n    let mut end_array_flags = TokenFlags {\n        create_json_entry: 1,\n        json_entry_type: BEGIN_ARRAY_TOKEN,\n        is_end_of_object_or_array: 1,\n        is_start_of_object_or_array: 0,\n        new_context: 0,\n        is_key_token: 0,\n        is_value_token: 0,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 1,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 0,\n        preserve_num_entries: 0\n    };\n\n    let mut string_flags = TokenFlags {\n        create_json_entry: 1,\n        json_entry_type: STRING_TOKEN,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 0,\n        new_context: OBJECT_CONTEXT,\n        is_key_token: 0,\n        is_value_token: 1,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 1,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 1,\n        preserve_num_entries: 1\n    };\n\n    let mut numeric_flags = TokenFlags {\n        create_json_entry: 1,\n        json_entry_type: NUMERIC_TOKEN,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 0,\n        new_context: OBJECT_CONTEXT,\n        is_key_token: 0,\n        is_value_token: 1,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 1,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 1,\n        preserve_num_entries: 1\n    };\n\n    let mut literal_flags = TokenFlags {\n        create_json_entry: 1,\n        json_entry_type: LITERAL_TOKEN,\n        is_end_of_object_or_array: 0,\n        is_start_of_object_or_array: 0,\n        new_context: OBJECT_CONTEXT,\n        is_key_token: 0,\n        is_value_token: 1,\n        is_value_token_in_array_context: 0,\n        create_key_entry: 1,\n        is_end_of_object_or_array_in_array_context: 0,\n        preserve_identity_value: 1,\n        preserve_num_entries: 1\n    };\n\n    flags[NO_TOKEN] = no_token_flags;\n    flags[BEGIN_OBJECT_TOKEN] = begin_object_flags;\n    flags[END_OBJECT_TOKEN] = end_object_flags;\n    flags[BEGIN_ARRAY_TOKEN] = begin_array_flags;\n    flags[END_ARRAY_TOKEN] = end_array_flags;\n    flags[KEY_SEPARATOR_TOKEN] = no_token_flags;\n    flags[VALUE_SEPARATOR_TOKEN] = no_token_flags;\n    flags[STRING_TOKEN] = string_flags;\n    flags[NUMERIC_TOKEN] = numeric_flags;\n    flags[LITERAL_TOKEN] = literal_flags;\n    flags[KEY_TOKEN] = key_token_flags;\n\n    no_token_flags.new_context = ARRAY_CONTEXT;\n    key_token_flags.new_context = ARRAY_CONTEXT;\n    string_flags.new_context = ARRAY_CONTEXT;\n    numeric_flags.new_context = ARRAY_CONTEXT;\n    literal_flags.new_context = ARRAY_CONTEXT;\n\n    end_object_flags.is_end_of_object_or_array_in_array_context = 1;\n    end_array_flags.is_end_of_object_or_array_in_array_context = 1;\n    string_flags.is_value_token_in_array_context = 1;\n    numeric_flags.is_value_token_in_array_context = 1;\n    literal_flags.is_value_token_in_array_context = 1;\n    flags[NUM_TOKENS + NO_TOKEN] = no_token_flags;\n    flags[NUM_TOKENS + BEGIN_OBJECT_TOKEN] = begin_object_flags;\n    flags[NUM_TOKENS + END_OBJECT_TOKEN] = end_object_flags;\n    flags[NUM_TOKENS + BEGIN_ARRAY_TOKEN] = begin_array_flags;\n    flags[NUM_TOKENS + END_ARRAY_TOKEN] = end_array_flags;\n    flags[NUM_TOKENS + KEY_SEPARATOR_TOKEN] = no_token_flags;\n    flags[NUM_TOKENS + VALUE_SEPARATOR_TOKEN] = no_token_flags;\n    flags[NUM_TOKENS + STRING_TOKEN] = string_flags;\n    flags[NUM_TOKENS + NUMERIC_TOKEN] = numeric_flags;\n    flags[NUM_TOKENS + LITERAL_TOKEN] = literal_flags;\n    flags[NUM_TOKENS + KEY_TOKEN] = key_token_flags;\n\n    let mut result: [Field; NUM_TOKENS * 2] = [0; NUM_TOKENS * 2];\n    for i in 0..(NUM_TOKENS as u32 * 2) {\n        result[i] = flags[i].to_field();\n    }\n    println(f\"TOKEN FLAGS TABLE = {result}\");\n    assert(result[4] == -1);\n    result\n}\n\nglobal TokenFlagsTable: [Field; NUM_TOKENS_MUL_2] = [0x0101, 0x010000000000000000, 0x010101000000000001000000, 0x010100000000000000, 0x010301000000000001000000, 0x0101, 0x0101, 0x010700000000010001000101, 0x010800000000010001000101, 0x010900000000010001000101, 0x01000000000101, 0x0100000000000101, 0x010000000000000000, 0x010101000000000001010000, 0x010100000000000000, 0x010301000000000001010000, 0x0100000000000101, 0x0100000000000101, 0x010700000100010101000101, 0x010800000100010101000101, 0x010900000100010101000101, 0x0101000000000101];\n\n// #[test]\n// fn woo() {\n//     make_capture_table_full();\n// }\n// global CAPTURE_TABLE_ENCODED = make_capture_table_full();\n\nstruct JSON<let NumBytes: u32, let NumPackedFields: u16, let TranscriptEntries: u32> {\n    json: [u8; NumBytes],\n    transcript: [Field; TranscriptEntries],\n    transcript_length: u16,\n    key_data: [Field; TranscriptEntries], // todo make smaller? somehow? urgh\n    key_hashes: [Field; TranscriptEntries],\n    layer_id: Field,\n    layer_context: Field, // is the current layer an OBJECT_LAYER, ARRAY_LAYER or SINGLE_VALUE_LAYER\n    layer_index_in_transcript: Field,\n    packed_json_entries: [Field; TranscriptEntries],\n    packed_json: [Field; NumPackedFields]\n}\n\n/*\nNEXT UP: HANDLE ARRAYS\nthis requires adding an array index into the key data being hashed to form our list of objects\n\n*/\nimpl<let NumBytes: u16, let NumPackedFields: u16, let TranscriptEntries: u16> JSON<NumBytes, NumPackedFields, TranscriptEntries> {\n\n    fn compute_packed_json(&mut self) {\n        let NumWholeLimbs = NumBytes / 31;\n        for i in 0..NumWholeLimbs {\n            let mut limb: Field = 0;\n            for j in 0..31 {\n                limb *= 0x100;\n                limb += self.json[i * 31 + j] as Field;\n            }\n            std::as_witness(limb);\n            self.packed_json[i] = limb;\n            println(f\"{limb}\"); //limb == 0);\n        }\n        let NumRemainingBytes = NumBytes - NumWholeLimbs * 31;\n        let mut limb: Field = 0;\n        for j in 0..NumRemainingBytes {\n            limb *= 0x100;\n            limb += self.json[NumWholeLimbs * 31 + j] as Field;\n        }\n        for j in NumRemainingBytes..31 {\n            limb *= 0x100;\n        }\n        std::as_witness(limb);\n        self.packed_json[NumWholeLimbs + (NumRemainingBytes == 0) as u16] = limb;\n    }\n    fn capture_missing_tokens(&mut self) {\n        let mut updated_transcript: [Field; TranscriptEntries] = [0; TranscriptEntries];\n        let mut transcript_ptr: Field = 0;\n        // hmm probably need a null transcript value?!?!\n\n        for i in 0..TranscriptEntries {\n            let index_valid = (i < self.transcript_length) as Field; // 4.5 gates?\n            // 5.25 gates\n            let TranscriptEntry{token, index, length} = TranscriptEntry::from_field(self.transcript[i]);\n            // let old = updated_transcript[transcript_ptr];\n            // let new = self.transcript[i];\n            // let updated = (new - old) * index_valid + old;\n            // TODO: validate it's ok for the head to be invalid. i.e. x[transcript_ptr] will repeatedly be overwritten once i >= transcript_length\n            // this should be fine because num_entries <= transcript_ptr\n            // 7 gates? self.transcript is a RAM array, as is updated_transcript\n            updated_transcript[transcript_ptr] = self.transcript[i];\n            // pdated_transcript[transcript_ptr] = self.transcript[i];\n            // 1 gate\n            // subtotal 17.75 gates\n            transcript_ptr += index_valid;\n\n            // 2 gates\n            let token_is_numeric_or_literal= TOKEN_IS_NUMERIC_OR_LITERAL[token];\n            // TODO we might be able to remove `* token_is_numeric_or_literal`. we do this so that we don't overflow the json\n            // but the original parse shouldn't produce a token where index + length can overflow?\n            // 1 gate or 2 gates\n            let index_of_possible_grammar = (index + length) * token_is_numeric_or_literal;\n            // 2 gates\n            let ascii = self.json[index_of_possible_grammar];\n\n            // TODO: combine new_grammar and scan_token into a single lookup\n            // 2 gates eventually\n            let new_grammar = GRAMMAR_CAPTURE_PUSH_TRANSCRIPT[ascii];\n            let scan_token = GRAMMAR_CAPTURE_TOKEN[ascii];\n            let new_entry = TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n\n            // let old_transcript = updated_transcript[transcript_ptr];\n            // TODO: the head of the transcript will likely always be filled with a garbage entry\n            // 1 gate\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            // 3 gates (ow)\n            // 11 + 17.75 = 28.75\n            let update = new_grammar as Field * token_is_numeric_or_literal * index_valid;\n            // let result_transcript = (new_transcript - old_transcript) * update + old_transcript;\n            // 3.5 gates\n            updated_transcript[transcript_ptr] = new_transcript;\n            // 1 gate\n            transcript_ptr += update;\n            // subtotal 33.25 gates. ow\n        }\n        self.transcript = updated_transcript;\n    }\n\n    // TODO: when impl is more mature, merge this into create_json_entries\n    fn keyswap(&mut self) {\n        // TODO: this won't work if 1st entry is a key!\n        let mut current= TranscriptEntry::from_field(self.transcript[0]);\n        let mut next: TranscriptEntry = TranscriptEntry::new();\n\n        for i in 0..TranscriptEntries - 1 {\n            next = TranscriptEntry::from_field(self.transcript[i + 1]);\n\n            let next_is_key = (next.token == KEY_SEPARATOR_TOKEN) as Field;\n\n            let valid_token = TOKEN_IS_ARRAY_OBJECT_OR_VALUE[current.token];\n            assert((valid_token * next_is_key) + (1 - next_is_key) == 1, \"expected value\");\n\n            let old_transcript = self.transcript[i];\n            let new_transcript = TranscriptEntry::to_field(TranscriptEntry { token: KEY_TOKEN, index: current.index, length: current.length });\n            let updated_transcript = (new_transcript - old_transcript) * next_is_key + old_transcript;\n            self.transcript[i] = updated_transcript;\n\n            current = next;\n        }\n    }\n\n    //  fn process_transcript_entry(entry: TranscriptEntry)\n    fn create_json_entries(&mut self) {\n        let mut entry_ptr = 0;\n        let mut depth: Field = 1;\n        let mut num_entries_at_current_depth: Field = 0;\n        let mut next_identity_value: Field = 1;\n        let mut current_identity_value: Field = 0;\n        let mut context = OBJECT_CONTEXT;\n        let mut key_ptr = 0;\n        let mut current_key_index: Field = 0;\n        let mut current_key_length: Field = 0;\n\n        // TODO why 32?\n        let mut parent_context_stack: [Field; 32] = [0; 32];\n        // let mut key_data: [Field; TranscriptEntries] = [0; TranscriptEntries];\n        // let mut packed_json_entries: [Field; TranscriptEntries] = [0; TranscriptEntries];\n\n        for i in 0..TranscriptEntries {\n            let TranscriptEntry{token, index, length} = TranscriptEntry::from_field(self.transcript[i]);\n\n            // 18 gates\n            let TokenFlags{\n                create_json_entry,\n                json_entry_type,\n                is_end_of_object_or_array,\n                is_start_of_object_or_array,\n                new_context,\n                is_key_token: update_key,\n                is_value_token,\n                is_value_token_in_array_context,\n                create_key_entry,\n                is_end_of_object_or_array_in_array_context,\n                preserve_identity_value,\n                preserve_num_entries\n            } = TokenFlags::from_field(TokenFlagsTable[token + context * NUM_TOKENS]);\n\n            // 1 gate\n            current_key_index = (index - current_key_index) * update_key + current_key_index;\n            std::as_witness(current_key_index);\n            // 1 gate\n            current_key_length = (length - current_key_length) * update_key + current_key_length;\n            std::as_witness(current_key_length);\n\n            // 3 gates\n            let new_context_stack_entry = JSONContextStackEntry::to_field(\n                JSONContextStackEntry {\n                num_entries: num_entries_at_current_depth,\n                context,\n                current_key_length,\n                current_key_index,\n                json_index: index,\n                entry_pointer: entry_ptr,\n                current_identity: current_identity_value\n            }\n            );\n            // let is_value_token: Field = create_json_entry - is_end_of_object_or_array; // TODO PUT IN JSONCONTEXTSTACKENTRY\n            // let is_value_token_in_array_context: Field = is_value_token * context; // TODO PUT IN JSONCONTEXTSTACKENTRY\n\n            // 1 gate\n            let depth_index: Field = (depth - 1);\n            std::as_witness(depth_index);\n            // 2 gates\n            let previous_stack_entry_packed = parent_context_stack[depth_index];\n\n            // 25 gates\n            let previous_stack_entry = JSONContextStackEntry::from_field(previous_stack_entry_packed);\n\n            // 0\n            let object_or_array_entry: JSONEntry = JSONEntry {\n                    array_pointer: previous_stack_entry.num_entries, // duplicated lookup remove once working \n                    entry_type: json_entry_type,\n                    child_pointer: previous_stack_entry.entry_pointer, // need a stack to figure this out. is depth value correct here?\n                    num_children: num_entries_at_current_depth, // no children\n                    json_pointer: previous_stack_entry.json_index,\n                    json_length: length,\n                    parent_index: previous_stack_entry.current_identity,\n                    id: current_identity_value\n                };\n            // 0\n            let value_entry: JSONEntry = JSONEntry {\n                    array_pointer: num_entries_at_current_depth, // duplicated lookup remove once working \n                    entry_type: json_entry_type,\n                    child_pointer: 0, // need a stack to figure this out. is depth value correct here?\n                    num_children: 0, // no children\n                    json_pointer: index,\n                    json_length: length,\n                    parent_index: current_identity_value,\n                    id: 0\n                };\n\n            // 4 gates\n            let object_or_array_entry_packed = object_or_array_entry.to_field();\n            // 4 gates\n            let value_entry_packed = value_entry.to_field();\n\n            // 2 gates\n            let new_entry = (object_or_array_entry_packed - value_entry_packed) * is_end_of_object_or_array\n                + value_entry_packed;\n            std::as_witness(new_entry);\n\n            // 6 gates\n            let mut new_key_data = (current_identity_value + current_key_index * 0x10000 + current_key_length * 0x100000000)\n                * is_value_token;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data\n                + (num_entries_at_current_depth * 0x1000000000000) * is_value_token_in_array_context;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data\n                + (previous_stack_entry.current_identity\n                        + previous_stack_entry.current_key_index * 0x10000\n                        + previous_stack_entry.current_key_length * 0x100000000)\n                        * is_end_of_object_or_array;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data\n                + (previous_stack_entry.num_entries * 0x1000000000000)\n                            * is_end_of_object_or_array_in_array_context;\n            std::as_witness(new_key_data);\n            // subtotal 67\n            // 3.5 gates\n            parent_context_stack[depth] = new_context_stack_entry;\n            // 41876 41740 = 136 = 2.125 gates + 1 from assert = 3.125 eh\n            // 4.5 gates\n            self.key_data[key_ptr] = new_key_data * create_key_entry;\n\n            // (read from key_data ROM = 2)\n            // (assert value == new_key_data * create_key_entry = 1)\n            // (save 1.5 gates * 1.5 init delta = 3)\n            // (repeat with packed_json_entries)\n            // 4.5 gates\n            // subtotal 79.5\n            self.packed_json_entries[entry_ptr] = new_entry * create_json_entry;\n\n            // 3 gates\n            let old = current_identity_value;\n            current_identity_value = (next_identity_value * is_start_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value + (previous_stack_entry.current_identity * is_end_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value\n            + old * preserve_identity_value;\n            std::as_witness(current_identity_value);\n\n            // 2 gates\n            num_entries_at_current_depth = num_entries_at_current_depth * preserve_num_entries;\n            std::as_witness(num_entries_at_current_depth);\n            num_entries_at_current_depth = num_entries_at_current_depth + is_value_token +\n            (previous_stack_entry.num_entries + 1) * is_end_of_object_or_array;\n            std::as_witness(num_entries_at_current_depth);\n            // 1 gate\n            next_identity_value = next_identity_value + is_start_of_object_or_array;\n            std::as_witness(next_identity_value);\n            // 1 gate\n            key_ptr += create_key_entry;\n            std::as_witness(key_ptr);\n            // 1 gate\n            depth = depth + is_start_of_object_or_array - is_end_of_object_or_array;\n\n            // 1 gate\n            // subtotal 88.5\n            entry_ptr += create_json_entry;\n            std::as_witness(entry_ptr);\n            context = new_context;\n        }\n    }\n\n    fn build_transcript(self) -> Self {\n        let mut transcript: [Field; TranscriptEntries] = [0; TranscriptEntries];\n        let mut transcript_ptr: Field = 0;\n        let mut scan_mode = GRAMMAR_SCAN as Field;\n        let mut length: Field = 0;\n        for i in 0..NumBytes {\n            // assert(lt_field_8_bit(transcript_ptr, TranscriptEntries as Field), \"too many tokens\");\n            let ascii = self.json[i];\n\n            // read from json = 0\n            // capture table idx computation = 1\n            // capture table read = 2\n            // 5 bytes = 3.25\n            // read RAM = 3.5\n            // write RAM = 3.5\n            // compute transcript entry = 1\n            // update length = 1\n            // update transcript_ptr = 1\n            // assert error flag = 1 (should be 0)\n            // 16.25 or 17.25 per byte. pain.\n\n            // we could improve by using unconstrained fn to compute transcript\n            // we then are validating what transcript[transcript_ptr] *should* be (because we don't update)\n            // which would cut 5 gates off\n            // 11.25 per byte?\n\n            // 1 gate to compute index\n            // 2 gates to read\n            let capture_context = CAPTURE_TABLE_ENCODED_FLAT[scan_mode * 128 + ascii as Field];\n            // 2 gates for 5 bytes + 5 range gates = 8.25\n            let bytes = capture_context.to_be_bytes(5);\n            let new_scan_mode = bytes[4] as Field;\n            let scan_token = bytes[3] as Field;\n            let push_transcript = bytes[2] as Field;\n            let increase_length = bytes[1] as Field;\n            let error_flag = bytes[0] as Field;\n\n            // what if we store the following:\n            // 1 ascii\n            // 2 scan mode\n            // 3 push_transcript\n            // 4 error flag (ick)\n            // but we avoid scan token, we use a future lookup for that\n\n\n            // ascii\n            // scan mode\n            // push transcript\n            // update length\n            // convert bytes would cost 4.75 instead of 8.25?\n            // 3.5 gate saving\n            // + remove error flag check = 1 gate saving\n\n            // + can fiddle with length for 1 gate saving\n            // 5.5 gate delta on 19.75\n            // -> 14.25 gates per byte\n            // could cut 0.75 by doing dumb bool checks\n            // = 6.25 delta\n            // use ROM array instead of RAM = 0.5\n            // 6.75 gate delta\n            // 13 per byte\n            // 1 gate for i - length\n            // 1 gate for to_field\n            // subtotal: 13.25\n            let new_entry = TranscriptEntry::to_field(TranscriptEntry { token: scan_token, index: i as Field - length, length });\n\n            // let old_entry = transcript[transcript_ptr];\n\n            // let entry = (new_entry - old_entry) * push_transcript + old_entry;\n            // 3.5 gates to write\n            // TODO might be a problem this last token\n            // 16.75\n            transcript[transcript_ptr] = new_entry; //  * push_transcript;\n            // 1 gate to update length\n            length = length * (1 - push_transcript) + increase_length;\n            std::as_witness(length);\n            // 1 gate to update transcript_ptr\n            // 18.75\n            transcript_ptr += push_transcript;\n\n            // hmm should be 0 gates but might be 1\n            // 19.75\n            // actual cost = 20\n            // missing a gate from transcript entry length param?\n            // odd maybe 1.25 not being used\n            assert(error_flag == 0, \"bad token?\");\n\n            scan_mode = new_scan_mode;\n        }\n        JSON {\n            json: self.json,\n            transcript,\n            transcript_length: transcript_ptr as u16,\n            key_data: self.key_data,\n            key_hashes: self.key_hashes,\n            layer_id: 0,\n            layer_context: OBJECT_LAYER, // TODO support arrays and single values,\n            layer_index_in_transcript: 0,\n            packed_json_entries: self.packed_json_entries,\n            packed_json: self.packed_json\n        }\n    }\n}\n\nfn extend_array<let InBytes: u32, let OutBytes: u32>(input: [u8; InBytes]) -> [u8; OutBytes] {\n    assert(InBytes <= OutBytes);\n    let mut result: [u8; OutBytes] = [0; OutBytes];\n    for i in 0..InBytes {\n        result[i] = input[i];\n    }\n    result\n}\n\n#[test]\nfn test_redux() {\n    /*\n0: {    0\n1: \n2: \"\n3: f    3\n4: o\n5: o\n6: \"\n7: :    7\n8:  \n9: 1    9\n10: 2\n11: 3\n12: 4\n13: ,   13\n14:  \n15: \"\n16: b   16\n17: a\n18: r\n19: \"\n20: :   20\n21:  \n22: {   22\n23:  \n24: \"\n25: f   25\n26: o\n27: o\n28: \"\n29: :   29\n30:  \n31: 9   31\n32: 8\n33: 7\n34: 6\n35: ,   35\n36:  \n37: \"\n38: b   38\n39: a\n40: r\n41: \"\n42: :   42\n43:  \n44: t   44\n45: r\n46: u\n47: e\n48:  \n49:  }  49\n50:  ,  50\n51:   \n52:  \"\n53:  b  53\n54:  a\n55:  z\n56:  \"\n57:  :  57\n58:   \n59:  \"\n60:  h  60\n61:  e\n62:  l\n63:  l\n64:  o\n65:  \"\n66:  \n67:  }\n*/\n    // TODO FIX PADDING ISSUE\n    let text = \"{ \\\"foo\\\": 1234, \\\"bar\\\": { \\\"foo\\\": 9876, \\\"bar\\\": true }, \\\"baz\\\": \\\"hello\\\" }                                    \";\n\n    let mut json = JSON {\n        json: text.as_bytes(),\n        transcript: [0; 30],\n        transcript_length: 0,\n        key_data: [0; 30],\n        key_hashes: [0; 30],\n        layer_id: 0,\n        layer_context: OBJECT_LAYER,\n        layer_index_in_transcript: 0,\n        packed_json_entries: [0; 30],\n        packed_json: [0; 7]\n    };\n\n    json = json.build_transcript();\n    json.capture_missing_tokens();\n    let get = |idx| TranscriptEntry::from_field(json.transcript[idx]);\n\n    assert(get(0).index == 0);\n    assert(get(1).index == 3);\n    let xx = get(2).index;\n    println(f\"index = {xx}\");\n    assert(get(2).index == 7);\n    assert(get(3).index == 9);\n    assert(get(4).index == 13);\n    assert(get(5).index == 16);\n    assert(get(6).index == 20);\n    assert(get(7).index == 22);\n    assert(get(8).index == 25);\n    assert(get(9).index == 29);\n    assert(get(10).index == 31);\n    assert(get(11).index == 35);\n    assert(get(12).index == 38);\n    assert(get(13).index == 42);\n    assert(get(14).index == 44);\n    assert(get(15).index == 49);\n    assert(get(16).index == 50);\n    assert(get(17).index == 53);\n    assert(get(18).index == 57);\n    assert(get(19).index == 60);\n\n    //let t0 = TranscriptEntry::from_field(json.transcript[0]);\n    assert(get(0).token == BEGIN_OBJECT_TOKEN);\n    assert(get(1).token == STRING_TOKEN);\n    assert(get(2).token == KEY_SEPARATOR_TOKEN);\n    assert(get(3).token == NUMERIC_TOKEN);\n    assert(get(4).token == VALUE_SEPARATOR_TOKEN);\n    assert(get(5).token == STRING_TOKEN);\n    assert(get(6).token == KEY_SEPARATOR_TOKEN);\n    assert(get(7).token == BEGIN_OBJECT_TOKEN);\n    assert(get(8).token == STRING_TOKEN);\n    assert(get(9).token == KEY_SEPARATOR_TOKEN);\n    assert(get(10).token == NUMERIC_TOKEN);\n    assert(get(11).token == VALUE_SEPARATOR_TOKEN);\n    assert(get(12).token == STRING_TOKEN);\n    assert(get(13).token == KEY_SEPARATOR_TOKEN);\n    assert(get(14).token == LITERAL_TOKEN);\n    assert(get(15).token == END_OBJECT_TOKEN);\n    assert(get(16).token == VALUE_SEPARATOR_TOKEN);\n    assert(get(17).token == STRING_TOKEN);\n    assert(get(18).token == KEY_SEPARATOR_TOKEN);\n    assert(get(19).token == STRING_TOKEN);\n    assert(get(20).token == END_OBJECT_TOKEN);\n\n    assert(get(1).length == 3);\n    assert(get(3).length == 4);\n    assert(get(5).length == 3);\n    assert(get(8).length == 3);\n    assert(get(10).length == 4);\n    assert(get(12).length == 3);\n    assert(get(14).length == 4);\n    assert(get(17).length == 3);\n    assert(get(19).length == 5);\n\n    assert(get(0).length == 0);\n    assert(get(2).length == 0);\n    assert(get(4).length == 0);\n    assert(get(6).length == 0);\n    assert(get(7).length == 0);\n    assert(get(9).length == 0);\n    assert(get(11).length == 0);\n    assert(get(13).length == 0);\n    assert(get(15).length == 0);\n    assert(get(16).length == 0);\n    assert(get(18).length == 0);\n    assert(get(20).length == 0);\n\n    // validate key swap works\n    json.keyswap();\n\n    let get = |idx| TranscriptEntry::from_field(json.transcript[idx]);\n\n    assert(get(0).token == BEGIN_OBJECT_TOKEN);\n    assert(get(1).token == KEY_TOKEN);\n    assert(get(2).token == KEY_SEPARATOR_TOKEN);\n    assert(get(3).token == NUMERIC_TOKEN);\n    assert(get(4).token == VALUE_SEPARATOR_TOKEN);\n    assert(get(5).token == KEY_TOKEN);\n    assert(get(6).token == KEY_SEPARATOR_TOKEN);\n    assert(get(7).token == BEGIN_OBJECT_TOKEN);\n    assert(get(8).token == KEY_TOKEN);\n    assert(get(9).token == KEY_SEPARATOR_TOKEN);\n    assert(get(10).token == NUMERIC_TOKEN);\n    assert(get(11).token == VALUE_SEPARATOR_TOKEN);\n    assert(get(12).token == KEY_TOKEN);\n    assert(get(13).token == KEY_SEPARATOR_TOKEN);\n    assert(get(14).token == LITERAL_TOKEN);\n    assert(get(15).token == END_OBJECT_TOKEN);\n    assert(get(16).token == VALUE_SEPARATOR_TOKEN);\n    assert(get(17).token == KEY_TOKEN);\n    assert(get(18).token == KEY_SEPARATOR_TOKEN);\n    assert(get(19).token == STRING_TOKEN);\n    assert(get(20).token == END_OBJECT_TOKEN);\n\n    // create json entries\n    json.compute_packed_json();\n    json.create_json_entries();\n\n    let mut json_entries: [JSONEntry; 30] = [JSONEntry::new(); 30];\n    for i in 0..30 {\n        json_entries[i] = JSONEntry::from_field(json.packed_json_entries[i]);\n    }\n    /*\n\nstruct JSONEntry {\n    key_pointer: Field,\n    array_pointer: Field,\n    entry_type: Field,\n    child_pointer: Field,\n    num_children: Field,\n    json_pointer: Field,\n    json_length: Field,\n    depth: Field,\n}\n    */\n\n    assert(json_entries[0].entry_type == NUMERIC_TOKEN);\n    assert(json_entries[0].json_pointer == get(3).index);\n    assert(json_entries[0].json_length == get(3).length);\n    let k = json.key_data[0];\n    let g = 1 + get(1).index * 0x10000 + get(1).length * 0x100000000;\n    println(f\"{k}\");\n    println(f\"{g}\");\n\n    assert(json.key_data[0] == 1 + get(1).index * 0x10000 + get(1).length * 0x100000000);\n    assert(\n        json_entries[0] == JSONEntry {\n            array_pointer: 0,\n            entry_type: NUMERIC_TOKEN,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: get(3).index,\n            json_length: get(3).length,\n            parent_index: 0,\n            id: 0\n        }\n    );\n\n    let k = json.key_data[1];\n    let gg = 2 + get(8).index * 0x10000;\n    println(f\"{k}\");\n    println(f\"recon{gg}\");\n    assert(json.key_data[1] == 2 + get(8).index * 0x10000 + get(8).length * 0x100000000);\n    assert(\n        json_entries[1] == JSONEntry {\n            array_pointer: 0,\n            entry_type: NUMERIC_TOKEN,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: get(10).index,\n            json_length: get(10).length,\n            parent_index: 0,\n            id: 0\n        }\n    );\n\n    assert(json.key_data[2] == 2 + get(12).index * 0x10000 + get(12).length * 0x100000000);\n    assert(\n        json_entries[2] == JSONEntry {\n            array_pointer: 1,\n            entry_type: LITERAL_TOKEN,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: get(14).index,\n            json_length: get(14).length,\n            parent_index: 0,\n            id: 0\n        }\n    );\n\n    assert(json.key_data[3] == 1 + get(5).index * 0x10000 + get(5).length * 0x100000000);\n\n    assert(\n        json_entries[3] == JSONEntry {\n            array_pointer: 1,\n            entry_type: BEGIN_OBJECT_TOKEN,\n            child_pointer: 1, // first child of object is json entry 1\n            num_children: 2,\n            json_pointer: get(7).index,\n            json_length: get(7).length,\n            parent_index: 0,\n            id: 0\n        }\n    );\n\n    let q = json.key_data[4];\n    println(f\"key[4] = {q}\");\n\n    // what if depth is...hmm hmm hmm\n\n    assert(json.key_data[4] == 1 + get(17).index * 0x10000 + get(17).length * 0x100000000);\n\n    assert(\n        json_entries[4] == JSONEntry {\n            array_pointer: 2,\n            entry_type: STRING_TOKEN,\n            child_pointer: 0, // first child of object is json entry 1\n            num_children: 0,\n            json_pointer: get(19).index,\n            json_length: get(19).length,\n            parent_index: 0,\n            id: 0\n        }\n    );\n\n    assert(json.key_data[5] == 0 + 0 * 0x10000);\n\n    // TODO: what to do with this? If JSON is an object, we shouldn't have a json entry that describes the top level object, no?\n    assert(\n        json_entries[5] == JSONEntry {\n            array_pointer: 0,\n            entry_type: BEGIN_OBJECT_TOKEN,\n            child_pointer: 0, // first child of object is json entry 1\n            num_children: 3,\n            json_pointer: get(0).index,\n            json_length: get(0).length,\n            parent_index: 0,\n            id: 0\n        }\n    );\n\n    json.compute_keyhash_and_sort_json_entries();\n\n    for i in 0..30 {\n        json_entries[i] = JSONEntry::from_field(json.packed_json_entries[i]);\n    }\n    // #####################\n    // let text = \"{ \\\"foo\\\": 1234, \\\"bar\\\": { \\\"foo\\\": 9876, \\\"bar\\\": true }, \\\"baz\\\": \\\"hello\\\" }\";\n\n    // begin object\n    // foo\n    // begin object\n    // bar.foo\n    // TODO: what to do with this? If JSON is an object, we shouldn't have a json entry that describes the top level object, no?\n    for i in 0..30 {\n        let jsonentries = json_entries[i];\n        println(f\"NEW ENTRY[{i}]= {jsonentries}\");\n    }\n\n    // assert(\n    //     json_entries[26] == JSONEntry {\n    //         array_pointer: 1,\n    //         entry_type: BEGIN_OBJECT_TOKEN,\n    //         child_pointer: 28, // first child of object is json entry 1 // ah fuck wot\n    //         num_children: 2,\n    //         json_pointer: get(7).index,\n    //         json_length: get(7).length,\n    //         parent_index: 0,\n    //         id: 0\n    //     }\n    // );\n    // assert(\n    //     json_entries[27] == JSONEntry {\n    //         array_pointer: 0,\n    //         entry_type: NUMERIC_TOKEN,\n    //         child_pointer: 0,\n    //         num_children: 0,\n    //         json_pointer: get(3).index,\n    //         json_length: get(3).length,\n    //         parent_index: 0,\n    //         id: 0\n    //     }\n    // );\n\n    // assert(\n    //     json_entries[25] == JSONEntry {\n    //         array_pointer: 2,\n    //         entry_type: STRING_TOKEN,\n    //         child_pointer: 0, // first child of object is json entry 1\n    //         num_children: 0,\n    //         json_pointer: get(19).index,\n    //         json_length: get(19).length,\n    //         parent_index: 0,\n    //         id: 0\n    //     }\n    // );\n\n    // assert(\n    //     json_entries[29] == JSONEntry {\n    //         array_pointer: 0,\n    //         entry_type: NUMERIC_TOKEN,\n    //         child_pointer: 0,\n    //         num_children: 0,\n    //         json_pointer: get(10).index,\n    //         json_length: get(10).length,\n    //         parent_index: 0,\n    //         id: 0\n    //     }\n    // );\n\n    // assert(\n    //     json_entries[28] == JSONEntry {\n    //         array_pointer: 1,\n    //         entry_type: LITERAL_TOKEN,\n    //         child_pointer: 0,\n    //         num_children: 0,\n    //         json_pointer: get(14).index,\n    //         json_length: get(14).length,\n    //         parent_index: 0,\n    //         id: 0\n    //     }\n    // );\n\n    let result: [u8; 5] = json.get_string_unchecked(\"baz\".as_bytes(), 3);\n    assert(result == \"hello\".as_bytes());\n\n    let result: Option<[u8; 5]> = json.get_string(\"baz\".as_bytes(), 3);\n    assert(result.is_some());\n    assert(result.unwrap() == \"hello\".as_bytes());\n\n    let result: Option<[u8; 1]> = json.get_string(\"wibble\".as_bytes(), 5);\n    assert(result.is_some() == false);\n\n    let result: u64 = json.get_number_unchecked(\"foo\".as_bytes(), 3);\n    assert(result == 1234);\n\n    let result: Option<u64> = json.get_number(\"foo\".as_bytes(), 3);\n    assert(result.is_some());\n    assert(result.unwrap() == 1234);\n\n    let result: Option<u64> = json.get_number(\"fooo\".as_bytes(), 4);\n    assert(result.is_some() == false);\n\n    let mut nested_json = json.get_object(\"bar\".as_bytes(), 3).unwrap();\n    let result: Option<u64> = nested_json.get_number(\"foo\".as_bytes(), 3);\n    assert(result.is_some() == true);\n    assert(result.unwrap() == 9876);\n}\n\n// next big TODOs:\n// 1. fix off-by-one layer_id values\n// 2. add layer_context into JSON. differentiate between single values, arrays and objects\n\n// despite objects not being sorted in element order, the JSON entries *do* have array_id values\n// so we CAN iterate through them!\n#[test]\nfn test_literal() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<142, 10, 20> = JSON {\n        json: text.as_bytes(),\n        transcript: [0; 20],\n        transcript_length: 0,\n        key_data: [0; 20],\n        key_hashes: [0; 20],\n        layer_id: 0,\n        layer_context: OBJECT_LAYER,\n        layer_index_in_transcript: 0,\n        packed_json_entries: [0; 20],\n        packed_json: [0; 10]\n    };\n\n    json = json.build_transcript();\n    json.capture_missing_tokens();\n    json.keyswap();\n    json.compute_packed_json();\n    json.create_json_entries();\n    json.compute_keyhash_and_sort_json_entries();\n\n    let result: JSONLiteral = json.get_literal_unchecked(\"testA\".as_bytes(), 5);\n    assert(result.is_false() == true);\n    assert(result.is_true() == false);\n    assert(result.is_null() == false);\n    assert(result.to_bool() == false);\n\n    let result_option: Option<JSONLiteral> = json.get_literal(\"testA\".as_bytes(), 5);\n    assert(result_option.is_some());\n    assert(result_option.unwrap().value == result.value);\n}\n\n#[test]\nfn test_arrays() {\n    /*\n{   \n    \"name\": \"Adeel Solangi\",\n    \"age\": 62,\n    \"portfolio\": {\n        \"vibe_ratings\": [1,2],\n        \"elemental_lorem \": false\n    }\n}\n*/\n    // false produces a numeric not a literal. fix\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"age\\\": 62, \\\"portfolio\\\": { \\\"vibe_ratings\\\": [1,2],\\\"elemental_lorem\\\": false }}                                                 \";\n    // this one is fucked?\n    // let text = \"{\\\"name\\\": \\\"Adeel Solangi\\\",\\\"age\\\": 62,\\\"portfolio\\\": {\\\"vibe_ratings\\\": [1, 4, 6, 89],\\\"elemental_lorem_ipsum\\\": [{\\\"flim\\\": \\\"flam\\\",\\\"polar\\\": \\\"bear\\\",\\\"watson\\\": false},{\\\"flim\\\": \\\"malf\\\",\\\"polar\\\": \\\"penguin\\\",\\\"watson\\\": true}]}}\";\n    // let text = \"{    \\\"name\\\": \\\"Adeel Solangi\\\",    \\\"age\\\": 62,  \\\"portfolio\\\": { \\\"vibe_ratings\\\": [1,2,3,89], \\\"elemental_lorem \\\": [ { \\\"flim\\\": \\\"flam\\\", \\\"polar\\\": \\\"bear\\\" }, { \\\"f\\\": [1,2] } ] } }\";\n    let mut json = JSON {\n        json: text.as_bytes(),\n        transcript: [0; 60],\n        transcript_length: 0,\n        key_data: [0; 60],\n        key_hashes: [0; 60],\n        layer_id: 0,\n        layer_context: OBJECT_LAYER,\n        layer_index_in_transcript: 0,\n        packed_json_entries: [0; 60],\n        packed_json: [0; 10]\n    };\n\n    json = json.build_transcript();\n    json.capture_missing_tokens();\n    json.keyswap();\n    json.compute_packed_json();\n    json.create_json_entries();\n    json.compute_keyhash_and_sort_json_entries();\n\n    /*\n{   \n    \"name\": \"Adeel Solangi\",\n    \"age\": 62,\n    \"portfolio\": {\n        \"vibe_ratings\": [1,2,3,89],\n        \"elemental_lorem \": [\n            {\n                \"flim\": \"flam\",\n                \"polar\": \"bear\",\n                \"watson\": false\n            },\n            {\n                \"flim\": \"malf\",\n                \"polar\": \"penguin\",\n                \"watson\": true\n            }\n        ]\n    }\n}\n*/\n    let mut json_entries: [JSONEntry; 60] = [JSONEntry::new(); 60];\n    for i in 0..60 {\n        json_entries[i] = JSONEntry::from_field(json.packed_json_entries[i]);\n    }\n    assert(json_entries[56].entry_type == LITERAL_TOKEN);\n    assert(json_entries[56].parent_index == 2);\n\n    assert(json_entries[57].entry_type == BEGIN_ARRAY_TOKEN);\n    assert(json_entries[57].parent_index == 2);\n\n    assert(json_entries[58].entry_type == NUMERIC_TOKEN);\n    assert(json_entries[58].parent_index == 3);\n\n    assert(json_entries[59].entry_type == NUMERIC_TOKEN);\n    assert(json_entries[59].parent_index == 3);\n\n    assert(json.key_exists(\"foo\".as_bytes(), 3) == false);\n    assert(json.key_exists(\"name\".as_bytes(), 4));\n    assert(json.key_exists(\"age\".as_bytes(), 3));\n    assert(json.key_exists(\"portfolio\".as_bytes(), 9));\n}\n","path":"/Users/zac/noir_json_parse/src/redux.nr"},"58":{"source":"struct TranscriptEntry {\n    token: Field,\n    index: Field,\n    length: Field\n}\n\nimpl TranscriptEntry {\n    fn new() -> Self {\n        TranscriptEntry { token: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.token + self.index * 0x100 + self.length * (0x1000000)\n    }\n\n    // 2 gates to add bytes into sum\n    // 1.25 gates for range checks\n    // 2 gates to get u16s\n    // 5.25 gates total\n    fn from_field(felt: Field) -> Self {\n        let slices = felt.to_be_bytes(5); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 256;\n        let index = slices[3] as Field + slices[2] as Field * 256;\n        let token = slices[4] as Field;\n        Self { token, index, length }\n    }\n}\n","path":"/Users/zac/noir_json_parse/src/transcript_entry.nr"},"66":{"source":"/*\nenum JsonTranscript {\n    OBJECT_START,\n    OBJECT_END,\n    ARRAY_START,\n    ARRAY_END,\n    KEY_CAPTURE\n    STRING_CAPTURE,\n    NUMERIC_CAPTURE,\n    BOOL_CAPTURE\n}\n*/\nmod redux;\nmod redux_tables;\nmod lt;\nmod keymap;\nmod json_entry;\nmod transcript_entry;\nmod test_data;\nmod getters;\nmod keyhash;\nmod slice_field;\nuse crate::redux::JSON;\nuse crate::slice_field::{slice_fields, slice_field};\nuse crate::keyhash::{Hasher, slice_200_bits_from_field, get_keyhash_chunky, sum_var_bytes_into_field};\nuse crate::lt::lt_field_16_bit;\nglobal LEN = 10000;\nunconstrained fn preamble(_json: JSON<1024, 64, 37>) -> JSON<1024, 64, 37> {\n    let mut json = _json.build_transcript();\n    let x = json.transcript[0];\n    println(f\"{x}\");\n    json.capture_missing_tokens();\n    json.keyswap();\n    json.create_json_entries();\n    json\n}\n// 38994\n// 10002\n\n// or 57,527\n\n// 78,185\n// vs 48,453\n// 30,032 for compute_keyhash and sort entries with the sorting commented out??\n// 469 per element? does not compute\n\n// 30,548 for 64 iterations REDUCED TO 29,863\n// 30,197 for 63 iteration REDUCED TO 29,512\n// weird thing is this adds 800\n// = 351 per iteration\\\n// without the 200 bit slice method:\n// 24,514 for 64 iterations\n// 24,246 for 63 iterations\n// 268 per iteration\n\n// -> 200 bit slice method = 83 gates\n// 200 bits = 15 slices = 5 gates + 3.75 = 8.75 gates\n// 54 bits = 4 slices = 3 gates\n// 200 * 2 + 54 * 2 = 17.5 + 6 = 23.5 gates\n// 1st assert = 1 gate\n// lo_diff = 1 gate\n// hi_diff = 1 gate\n// should be 26.5 gates\n// 5656 for 99 (slice field)\n// 5671 for 100 (slice field)\n// diff = 15? that can't be right\n// wo range check 128. 5012 vs 5021 = 9\n\n// slice limbs\n// 99 = 37955\n// 100 = 38283\n// delta = 283 + 45 = 328 lol fuck\n\n// size 1 slice limbs\n// 99 = 28303\n// 100 = 28533\n// delta = 230 man painful\n\n// size 2\n// 99 = 33227\n// 100 = 33508\n// delta = 285 pain\n\n// size 5 slice limbs\n// 99 =  48103\n// 100 = 48533\n// delta = 430\n\n// 607\n// 601 6\n// 595 6\n// 589  6\n\n// 645\n// 640\n\n// 606\n// 600\n\n// 6006\n// 5145\n// 150?\nglobal TEST1: [Field; 35] = [\n0x000000000, // 0 0 0 0 0 0 0 0 0\n0x000000001, // 0 0 0 0 0 0 0 0 1\n0x000000002, // 0 0 0 0 0 0 0 1 0\n0x000000004, // 0 0 0 0 0 0 1 0 0\n0x000000008, // 0 0 0 0 0 1 0 0 0\n0x000000010, // 0 0 0 0 1 0 0 0 0\n0x000000020, // 0 0 0 1 0 0 0 0 0\n0x000000040, // 0 0 1 0 0 0 0 0 0\n0x000000080, // 0 1 0 0 0 0 0 0 0\n0x000000100, // 1 0 0 0 0 0 0 0 0\n0x000000000, // 0 0 0 0 0 0 0 0 0\n0x000000001, // 0 0 0 0 0 0 0 0 1\n0x000000002, // 0 0 0 0 0 0 0 1 0\n0x000000004, // 0 0 0 0 0 0 1 0 0\n0x000000008, // 0 0 0 0 0 1 0 0 0\n0x000000010, // 0 0 0 0 1 0 0 0 0\n0x000000020, // 0 0 0 1 0 0 0 0 0\n0x000000040, // 0 0 1 0 0 0 0 0 0\n0x000000080, // 0 1 0 0 0 0 0 0 0\n0x000000100, // 1 0 0 0 0 0 0 0 0\n0x000000000, // 0 0 0 0 0 0 0 0 0\n0x000000001, // 0 0 0 0 0 0 0 0 1\n0x000000002, // 0 0 0 0 0 0 0 1 0\n0x000000004, // 0 0 0 0 0 0 1 0 0\n0x000000008, // 0 0 0 0 0 1 0 0 0\n0x000000010, // 0 0 0 0 1 0 0 0 0\n0x000000020, // 0 0 0 1 0 0 0 0 0\n0x000000040, // 0 0 1 0 0 0 0 0 0\n0x000000080, // 0 1 0 0 0 0 0 0 0\n0x000000100, // 1 0 0 0 0 0 0 0 0\n0x000000010, // 0 0 0 0 1 0 0 0 0\n0x000000020, // 0 0 0 1 0 0 0 0 0\n0x000000040, // 0 0 1 0 0 0 0 0 0\n0x000000080, // 0 1 0 0 0 0 0 0 0\n0x000000100, // 1 0 0 0 0 0 0 0 0\n];\n\nglobal FOO: [Field; 4] = [0, 1, 2, 3];\nfn maiff(p: Field) {\n    // let k = LAST_LIMB_PATH[p[0]];\n    // println(f\"{k}\");\n    // let q = TEST1[p[0]];\n    // println(f\"{q}\"); // 47\n    // let k = LAST_LIMB_PATH[lhs[0]];\n    // println(f\"{k}\");\n    // let k = FOO[p];\n    // println(f\"{k}\");\n    // let k = LAST_LIMB_PATH[p];\n    //  let k: [Field; 2] = get_last_limb_path(p);\n    //  println(f\"{k}\");\n    // reading array = 147 gates\n    // get_last_limb_path =150 gates\n    // init = 145 - 8 = 137\n    // 35 * 3 = 105 . + 32?\n    // 35 range check...\n    // 6 bit = 64 / 3 values = 22 values\n    // 4 3 3 3 3 3 3 - = 8 gates padding * 2 = 16 gates padding\n    // hmm hmm hmm hmm\n    // OK so we save 1 gate per call to keyfind.\n    // We have 64 keys max per 1kb json = save 64. cost is quite a bit higher. blah\n    // we save 3? gates if key len is 3 fields\n    // 8 -> 17 = 9 gates\n    // 4 gates to make\n    // 2 gates to read\n    // 17 gates = 2 9 gates init\n    // 20 gate = size 3 12 gates init\n    // 23 gates = size 4 hmm? 15 gates init\n    // 3 gates + (3 * size) boo\n    // 35 * 3 = 105 + 3 = 108 + 8 = 116 + 5 = 121\n    // cost = 140 gates\n    // where are the 3 gates coming from?\n    // 122 -> 220 = 100. why not 70?\n    // for i in 0..1 {\n    //     let k0: Field = (i as Field == p[i]) as Field;\n    //     let k1 = (i as Field == lhs[i]) as Field;\n    //     println(f\"{k0}{k1}\");\n    //     //let k: [Field; 2] = get_last_limb_path(p[i]);\n    //     //  println(f\"{k}\");\n    //     // let is_last = (i as Field == p[i]) as Field; // 3 gates\n    //     // let new = (rhs[i] - lhs[i]) * is_last + lhs[i]; // 2 gates\n    //     // assert(new == r[i]); // 1 gate\n    // }\n}\n\n// fn main(bytes: [u8; 1024]) {\n//     let mut json = JSON {\n//         json: bytes,\n//         transcript: [0; 64],\n//         transcript_length: 0,\n//         key_data: [0; 64],\n//         key_hashes: [0; 64],\n//         layer_id: 0,\n//         layer_context: 0,\n//         layer_index_in_transcript: 0,\n//         packed_json_entries: [0; 64],\n//         packed_json: [0; 37]\n//     };\n//     json.compute_packed_json();\n//     // 1333\n//     // 1828\n//     // cost = 495\n//     // makes sense\n//     for i in 0..37 {\n//         let kk = json.packed_json_entries[i];\n//         println(f\"{kk}\");\n//     }\n//     // json.compute_packed_json();\n//     // for i in 0..37 {\n//     //     let kk = json.packed_json_entries[i];\n//     //     println(f\"{kk}\");\n//     // }\n// }\n// 27060\n// 24895\n// wot were back to 217?\n// hmm something weird here\nfn mainslice(foo: [Field; 100], bar: [u8; 1000], num_bytes: [u16; 100], start_bytes: [u16; 100]) {\n    // 3,621 for 100\n    // 3,613 for 99 = 8 which is expected\n    // 54 bits\n\n    // 3,726 for 100\n    // 3,723 for 99 = 3 gates = expected\n\n    // slice 200 bits\n    // 100 = 6181\n    // 99  = 6154\n    // 27 gates ok expected\n    // so something squiffy is happening\n    // aaaah the cost of an extr arange table was glomming things\n\n    // 5,871\n    // 28600 28055 26669 24689 24540\n    // 28833 28283 26883 24883 24733\n\n    // current 27834 with path valid via lookups\n    // now 27184 without \"no data\" (via field padding)\n    // and 26987 after tweaking with path stuff\n    // and 26837 after removing u16 cast\n\n    // more lookup messiness 28700 vs 28471 = 229 erm regression?\n    // ok fixed. 24997 vs 24805 = 192? wow? \n\n    // 25349 vs 25153 = 150 + 46 = 196 hmmmm\n    // 24749 vs 24559 = 190 lol a bit better\n    // 23767 vs 23949 = 140 + 42 = 182\n    //            23569 = 178\n    // 45 * 3 = 135 => extra = 55 gates hmm\n\n    // 26987 vs 26773 delta = 214\n    // 26900 vs 26687 delta = 213?\n    // 26837 vs 26624 delta = 213? hmm\n    // hmm \n    // 27433 if we can remove no data\n    // 26483 if we can remove slice_valid somehow = 10 gates hmm hmm\n    // 233 hmmmmm this beats original version\n    // 228\n    // 214\n    // 194 (we need to remove that damn write-at-arb-index)\n    // 193\n    // 45 * 3 = 135\n\n    // num_whole_limbs => path for slice valid\n    // 0 = 0 0 0 0 0\n    // 1 = 0 0 0 0 1\n    // 2 = 0 0 0 1 1\n    // 3 = 0 0 1 1 1\n    // etc etc\n    // nice! let's do that!\n\n    // e.g. if outputfields = 2\n    // 3 gates to sort out\n    // 2 gates to read\n    // 5 gates total\n    // 1: 18499 18630 -> 131\n    // how to remove arb index\n    // say we compute idx of final limb\n    // we say if (i == idx) set value we write to last limb\n\n    // 2 fields\n    // 99 = 23571\n    // 89 = 21759\n    // delta = 241 + 1571 = 1812\n    // 181.2\n    // 21848\n\n    // 22115\n    // 23967\n\n    // 9535 99 (slice field)\n    // 9082 89\n    // diff 44.3\n\n    // 21848\n    // 23670\n    // 1822 diff = 182\n\n    // 21492\n    // 23274\n    // diff = 178.2\n\n    // CURRENT VALUE OF SLICE_FIELDS IS 182 GATES 26 AUGUST\n    for i in 0..89 {\n        let x: [Field; 2] = slice_fields(foo, start_bytes[i], num_bytes[i]);\n        // let x = slice_field(foo[i], start_bytes[i] as Field);\n        println(f\"{x}\");\n        //  assert(x[0] == x[1]);\n    }\n    // for i in 0..99 {\n    //     let x = sum_var_bytes_into_field(bar, 10, 10);\n    //     println(f\"{x}\");\n    // }\n}\n// 27983\n// 27759\n// 224\n// vs\n// 27883\n// 27659\n// 224\n// wat?\n// 10,285 (10,087)\n// 10,344 (10,144)\n// diff = 44 + 15 = 59 (diff = 57)\n// maybe 58 gates all in?\nfn mainddddold(foo: [Field; 100], bar: [u8; 1000], num_bytes: [u16; 100]) {\n    // 3,621 for 100\n    // 3,613 for 99 = 8 which is expected\n    println(f\"{bar}\");\n    // 54 bits\n\n    // 3,726 for 100\n    // 3,723 for 99 = 3 gates = expected\n\n    // slice 200 bits\n    // 100 = 6181\n    // 99  = 6154\n    // 27 gates ok expected\n    // so something squiffy is happening\n    // aaaah the cost of an extr arange table was glomming things\n\n    // 5,871\n\n    for i in 0..100 {\n        let x = slice_field(foo[i], num_bytes[i] as Field);\n        println(f\"{x}\");\n        //    assert(x.0 == x.1);\n    }\n    // for i in 0..99 {\n    //     let x = sum_var_bytes_into_field(bar, 10, 10);\n    //     println(f\"{x}\");\n    // }\n}\n// without slice 200 bits: 24,246. 24,259 wtf\n// with slice 200 bits: 29,512 (63 iterations) 29.520\n// this does not align with existing foobar\n// 24,279 vs 29.539\n// w/o range checks its 27,902 still crazy\n// 27965 with fn shell\n// ok something squiffy was getting masked away - constraining the input adds the gates\n\n// 63 = 10953\n// 64 = 11010\n// diff = 57\n\n// 63 = 12590\n// 64 = 12674\n// diff = 84 ? for 64 byte eh oh most commented out\n\n// 34392\n// 34821\n// 429 per key painful (poseidon hash is squiffy though)\nfn main_chunky(body_text: [u8; 1024], body_indices: [u16; 64], key_lengths: [u16; 64], dd: Field) {\n    println(f\"{body_text} {body_indices} {key_lengths}\");\n    let kk = slice_200_bits_from_field(dd);\n    println(f\"{kk}\");\n    for i in 0..64 {\n        let x = get_keyhash_chunky(body_text, body_indices[i], key_lengths[i]);\n        println(f\"{x}\");\n    }\n}\n\nfn mainget_keyhash(body_text: [u8; 1024], body_indices: [u16; 64], key_lengths: [u16; 64], dd: Field) {\n    println(f\"{body_text} {body_indices} {key_lengths}\");\n    let kk = slice_200_bits_from_field(dd);\n    let mut json = JSON {\n        json: body_text,\n        transcript: [0; 64],\n        transcript_length: 0,\n        key_data: [0; 64],\n        key_hashes: [0; 64],\n        layer_id: 0,\n        layer_context: 0,\n        layer_index_in_transcript: 0,\n        packed_json_entries: [0; 64],\n        packed_json: [0; 37]\n    };\n    json.compute_packed_json();\n\n    let hasher: Hasher<2> = Hasher {};\n    // iteration from 64 = 26,902\n    // iteration from 54 = 23,623\n    // delta = 3,279\n    // cost per iteration = 328\n\n    // old chunky = 35316 for 64, 31027 for 54\n    // delta = 3973 + 316 = 4,289\n    // cost per it = 428\n    // hmm\n\n    // lets see poseidon cost\n    // 34 iterations = 7410\n    // 24 iterations = 6638\n    // delta = 410 + 362 = 782\n    // per it = 78.2 \n\n    // ok what is get_keyhash without the hash\n    // 64 its = 21973\n    // 54 its = 19464\n    // delta = 536 + 1973 = 2200 + 109 = 2509\n    // cost  w/o hash = 251\n    // cost with hash  = 328\n    // hash cost = 49 + 28 = 77 good job\n    // ok why is cost 251\n    // slice field = 182\n\n    // pure slice. 64 its = 20213\n    //             54 its = 17979\n    // delta = 2,234 = 223?\n\n    // 54 iterations now 17871\n    // 64 iterations 20852\n    // cost = 2214\n    // delta = 221\n    // 64 iterations 20,211\n    // 54 iterations 17,997\n    // cost 2214 = 221 blah\n    // OK THIS WAS FOR KEY LENGTH 3\n\n    // 18148\n    // 16256\n    // delta 1892 = 189.2 ok better\n\n    // ok full fandango:  64 = 24,388\n    //                    54 = 21,521\n    // delta = 2,867 = 287 gates per keyhash. ouch.\n\n    // GET KEYHASH COST FOR 2 LIMBS SHOULD BE 287 287 287 287 2872\n    // 287 gates\n    // ~80 for poseidon2\n    // ~190 for slice\n    // ~17 for 200 bit chunk\n\n    // equivalent using byte slices (62 byte max)\n    // 35741\n    // 40880\n    // 5139 = 514 gates, 1.8x slower\n    println(f\"{kk}\");\n    for i in 1..64 {\n        assert(body_indices[i] == body_indices[i - 1]);\n        assert(key_lengths[i] == key_lengths[i - 1]);\n        //   println(f\"{a}, {b}\");\n    }\n    for i in 0..64 {\n        //   let key_fields = [json.packed_json[i], json.packed_json[i + 1], json.packed_json[i + 2]];\n        //   let x = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, 3);\n        //let x = hasher.get_keyhash(json.packed_json, body_indices[i], key_lengths[i]);\n\n        let x = get_keyhash_chunky(body_text, body_indices[i], key_lengths[i]);\n        println(f\"{x}\");\n    }\n}\n// sum_var_bytes_into_field 63 iterations: 15016\n// sum_var_bytes_into_field 64 iterations: 15138\n// cost per iteration = 84 + 38 = 122 wtf mate\n\n/*\n 31 lookups = 62\n 15 + 7 + 3 + 1 idx computations = 26\n chunks[1] sum = 1\n chunks[2] sum = 2\n chunks[3] sum = 4\n chunks[4] sum = 8\n update idx = 4\n mask chunks using path flag = 5\n update multiplicand = 4\n add gates for sum = 5\ntotal = 88 + 15 + 18 = 88 + 33 = 121\nok...erm blah\n\nwe currently call this twice = 242 * 64 = 15,488 fuck me\n\nOK WHAT ABOUT PLAN B\n\nAS WE PARSE THE JSON WE SPLIT IT INTO 10 BYTE CHUNKS\n\nto get our key we need to do the following:\n\nnum chunks = ceil(maxbytes / 10) + 1 ? \ne.g. 99 bytes. 1 byte in one limb, 98 bytes across 10 limbs\n\nthere is a first split and a last split\n1. get split index\n2. convert slice into low/high bytes. sum useful bytes\neven better. for partial chunks we use the algorithm we already have to sum\n\ncons: we need to dive into 2 limbs instead of 1\n\ncosts: 0.5 gates per json byte to compute limb sums\n        plus (json_bytes / limb_size) * 2 to store\n\nwhat about we do the following:\n\nwe store 16 byte slices\nwe store 8 byte slices\n\nBytes * (6 / 16) cost\n\nwe then do the following\nwe select K 16 byte limbs\nwe select 2 8 byte limbs\nwe select 2 split indices and split lengths\n\nok we imagine what to do just with 8 byte limbs\nstarting limb index = start_idx / 8 + (start_idx % 8 != 0) ew\n(keylen + start_idx) / 8 - (start_idx / 8) = number of whole limbs\nnum_overspill bytes = (keylen + start_idx) % 8\nnum_underspill bytes = start_idx % 8\n\nunderspill index = start_idx - limb_index * 8\noverspill = (limb_index + whole_limbs) * 8\n\nthe cost of this nonsense will be:\n\nstart_idx . divmod 8...\nquotient, remainder both range checked 1.25 gates * 2 = 2.5 gates\nquotient * 8 + remainder = start_idx = 1 gate\n(keylen + start_idx) divmod 8 = 3.5 gates\nnum whole limbs = 1 gate\nnum overspill bytes = 0\nnum underspill bytes = 0\nunderspill index = 1\noverspill index = 1\nstart_idx % 8 != 0 ... 2 gates minimum (can use lookup table)\ncompute limb index = 1\n\ntotal 13 gates minimum\n\nwe then need to assemble the limbs. we can probably do this 4 gates per limb just like we assemble bytes\nminor difficulty as we straddle 31 byte limb boundaries\n\n13 gates to split across limbs * 2 = 26 gates\n\nq * 8 + r - X = 0 yea 3.5 gates\n\nnum spillover bytes at start = 7 max\nnum spillover bytes at end = 7 max\n\n// 4 2 1\n// 14 vs 31 = 2.1x = 58 gates = 63 spare. 13 gates for the computations. 4 limbs... hmm\n\n// I think we should try this. as it scales much better for larger keys\n*/\n// 63 15,016 to 12,181 when removing the 16-sum = 2,835 gates / 63 = 45 gates\n// 16 reads = 32 gates\n// 15 index updates = 15 gates\n// adding 16 doodads into a sum = 8 gates\n// = 55 gates\n// huh?\n// removing all chunks[4] gives 11,362 \n/* \nexpectations:\n// 31 lookups\n// 30 index computations\n// \n\n// chunks 3 removal cuts from 12,181 to 9,850\n// 2,331 / 64 = 36.25?\n\n// chunks 2 removal cuts from 9.850 to 8.779 = 221 + 850 = 1,071 / 63 = 17\n\n// chunks 1 removal cuts from 8.779 to 8.275 = 504 / 63 = 8\n*/\n// 63: 8275\n// 64: 8290\nfn mainkjghg(body_text: [u8; 1024], body_indices: [u16; 64], key_lengths: [u16; 64], dd: Field) {\n    println(f\"{body_text} {body_indices} {key_lengths}\");\n    let kk = slice_200_bits_from_field(dd);\n    println(f\"{kk}\");\n    for i in 0..64 {\n        let x = sum_var_bytes_into_field(body_text, body_indices[i] as Field, key_lengths[i] as Field);\n        //   let x = get_keyhash_chunky(body_text, body_indices[i], key_lengths[i]);\n        println(f\"{x}\");\n    }\n}\n\n// 1,024 parse 48,948 without sorting and keyhash (ow)\n//             74,873 compute keyhash (25,925 for keyhashes)\n//             126,141 after sorting wtf\n\n// 287 * 64 = 18,368 = what cost of keyhash should be\n// where is extra 7,557 coming from?\n// we need to turn packed_json into ROM array (120-160 tops)\n// about 300 lookup table entries in slice fields (1200 tops)\n// ???\n\n// 48,948 to 55,091 for ONE keyhash\n// 5,091\n\n// ok new\n\n// empty: 1332\n// build_transcript: 21332\n// + capture_missing_tokens: 24233\n// + keyswap: 33605 (9k?)\n// + create_json_entries: 53989 (20k?)\n// + keyhash: 74936 (20,947. assuming 2k init for tables and crap (a lot), about 296 gates per hash)\n// + sort: 123,820 . ok this needs a lot of tender love and care\n\n/*\n    CREATE_JSON_ENTRIES....\n    each iteration should be about 90 gates\n    which would cost 5,760\n    but actual cost is 20,384\n*/\n\n// 53,989\n// 49,723\n// delta = 4266 = 426 per iteration\n\n// 40074 411791, 1105 delta = 110 hmm hmm writes pain?\n// 48948 45802, 3146 = 314 just for context stack?\n// 53,989\n// 51,154\n// 34,100\n// 42,001\n// delta = 8k which is much better!\n// 34,100 vs 41,876 = 7,776\n\n// 1 entry = 34,218\n// 64 = 41,876 = 7,65\n// still 121 gates per entry\n// 40093 vs 41876\n// looks like copying arrays is incurring a cost??\nfn main(text: str<1024>) {\n    // let strbytes = text.as_bytes();\n    // let mut inputs: [Field; 13] = [0; 13];\n    // for j in 0..13 {\n    //     let mut input: Field = 0;\n    //     for i in 0..31 {\n    //         input += text.as_bytes()[j * 31 + i] as Field;\n    //     }\n    //     inputs[j] = input;\n    // }\n    // inputs[0].assert_max_bit_size(1);\n    // inputs[1].assert_max_bit_size(2);\n    // inputs[2].assert_max_bit_size(3);\n    // inputs[3].assert_max_bit_size(4);\n    // inputs[4].assert_max_bit_size(5);\n    // inputs[5].assert_max_bit_size(6);\n    // inputs[6].assert_max_bit_size(7);\n    // inputs[7].assert_max_bit_size(8);\n    // inputs[8].assert_max_bit_size(0);\n    // inputs[9].assert_max_bit_size(10);\n    // inputs[10].assert_max_bit_size(11);\n    // inputs[11].assert_max_bit_size(12);\n    // inputs[12].assert_max_bit_size(13);\n    // inputs[13].assert_max_bit_size(14);\n\n    // let sliced: [Field; 2] = slice_fields(inputs, strbytes[5] as u16, strbytes[200] as u16);\n    // assert(sliced[0] == sliced[1]);\n    let mut json = JSON {\n        json: text.as_bytes(),\n        transcript: [0; 64],\n        transcript_length: 0,\n        key_data: [0; 64],\n        key_hashes: [0; 64],\n        layer_id: 0,\n        layer_context: 0,\n        layer_index_in_transcript: 0,\n        packed_json_entries: [0; 64],\n        packed_json: [0; 37]\n    };\n    // json = preamble(json);\n    let mut json = json.build_transcript();\n    let x = json.transcript[0];\n    println(f\"{x}\");\n    json.capture_missing_tokens();\n    json.keyswap();\n    json.compute_packed_json();\n    json.create_json_entries();\n    // // assert(json.packed_json[inputs[3]] == 1234);\n    // for i in 0..63 {\n    //     assert(json.key_data[i] == json.key_data[i + 1]);\n    // }\n    //  let keymap::KeyIndexData{ json_index, json_length, parent_id, array_index } = keymap::KeyIndexData::from_field(json.key_data[0]);\n    // assert(json_index == json_length);\n    // assert(parent_id == array_index);\n\n    // 62578\n    json.compute_keyhash_and_sort_json_entries();\n    // 51810 57908\n    // 51889 57911\n    // delta of 6,098 even after initing range tables\n    // delta of 6,022 after casting json to rom table first\n    // 58093 53041\n    // still 5k even after initializing all fo the slice_fields tables!\n    // 58119, 57807\n    // delta = 193 + 119 = 312 gates\n    // ok it's json.key_data that is the problem?\n    // 58082 58394\n    // 55359 53989\n    // 1,370 for 1st which makes sense because of all the tables. hmm\n    // let x = json.get_number_unchecked(\"hello\".as_bytes(), 5);\n    // println(f\"{x}\");\n}\n\n// 1000 = 56053\n// 1001 = 56109\n\n// 8311\n// 8303\n// 5 bytes = 8? ow\n// to radix is worse. man\n// expected \n// delta = 56 gates meh not good not the cause of woes\n// I expected it to be 11 + 8 = 19 gates\nglobal NB = 5;\nglobal NI = 1000;\nfn mainw(k: [Field; NI]) {\n    for i in 0..NI {\n        let z = k[i].to_be_radix(16, NB);\n        println(f\"{z}\");\n    }\n}\n// 87741\nfn main3(x: [u16; LEN], y: [u16; LEN], z: [bool; LEN]) {\n    for i in 0..LEN {\n        if (z[i]) {\n            assert(x[i] < y[i]);\n        }\n        // assert(lt_field_16_bit(x[i] as Field, y[i] as Field));\n    }\n}\n\nfn main2(x: [u16; LEN], y: [u16; LEN], z: [bool; LEN]) {\n    for i in 0..LEN {\n        assert(x[i] <= y[i]);\n    }\n}\n","path":"/Users/zac/noir_json_parse/src/main.nr"}},"names":["main"]}